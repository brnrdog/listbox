// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var TestUtils = require("./TestUtils.bs.js");
var UserEvent = require("@drewschrauf/bs-user-event/src/UserEvent.bs.js");
var Listboxkit__Listbox = require("../Listboxkit__Listbox.bs.js");
var ReactTestingLibrary = require("bs-react-testing-library/src/ReactTestingLibrary.bs.js");

var options = [
  "Red",
  "Green",
  "Blue"
];

function ListboxTest$ListboxComponent(Props) {
  var multiSelectOpt = Props.multiSelect;
  var multiSelect = multiSelectOpt !== undefined ? multiSelectOpt : false;
  var match = Listboxkit__Listbox.useListbox(options, multiSelect, undefined);
  var getOptionProps = match.getOptionProps;
  var highlightedIndex = match.highlightedIndex;
  var match$1 = Curry._1(match.getContainerProps, undefined);
  var onKeyDown = match$1.onKeyDown;
  return React.createElement("div", undefined, React.createElement("ul", {
                  role: match$1.role,
                  tabIndex: match$1.tabIndex,
                  onKeyDown: onKeyDown,
                  onFocus: match$1.onFocus,
                  onBlur: match$1.onBlur
                }, $$Array.mapi((function (index, option) {
                        var match = Curry._1(getOptionProps, index);
                        var highlighted = highlightedIndex === index;
                        return React.createElement("li", {
                                    key: option,
                                    "aria-selected": match["aria-selected"],
                                    role: match.role,
                                    onKeyDown: onKeyDown,
                                    onClick: match.onClick
                                  }, highlighted ? "* " + option : option);
                      }), options)), React.createElement("div", {
                  tabIndex: 0
                }));
}

var ListboxComponent = {
  options: options,
  make: ListboxTest$ListboxComponent
};

function component(multiSelectOpt, param) {
  var multiSelect = multiSelectOpt !== undefined ? multiSelectOpt : true;
  return React.createElement(ListboxTest$ListboxComponent, {
              multiSelect: multiSelect
            });
}

function getOption(name) {
  var partial_arg = {
    name: name
  };
  var partial_arg$1 = {
    NAME: "Str",
    VAL: "option"
  };
  return function (param) {
    return ReactTestingLibrary.getByRole(partial_arg$1, partial_arg, param);
  };
}

Jest.test("render listbox container", (function (param) {
        return TestUtils.toBeInTheDocument(expect(TestUtils.getListbox(undefined, ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined)))));
      }));

Jest.test("renders the options: Red, Green and Blue", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("Red")(component$1))));
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("Green")(component$1))));
        return TestUtils.toBeInTheDocument(expect(getOption("Blue")(component$1)));
      }));

Jest.test("highlights last option when pressing END", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        Curry._1(TestUtils.FireEvent.pressEnd, getOption("Red")(component$1));
        return TestUtils.toBeInTheDocument(expect(getOption("* Blue")(component$1)));
      }));

Jest.test("highlights first option when pressing HOME", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        Curry._1(TestUtils.FireEvent.pressHome, getOption("Blue")(component$1));
        return TestUtils.toBeInTheDocument(expect(getOption("* Red")(component$1)));
      }));

Jest.test("sets option aria-selected to true when clicked", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        Curry._1(TestUtils.FireEvent.pressEsc, getOption("Red")(component$1));
        var arg = TestUtils.FireEvent.click;
        Curry._2(arg, undefined, getOption("Red")(component$1));
        return TestUtils.toHaveAttribute("aria-selected", "true")(expect(getOption("* Red")(component$1)));
      }));

Jest.test("highlights next option when pressing DOWN ", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        var listbox = TestUtils.getListbox(undefined, component$1);
        Curry._1(TestUtils.FireEvent.pressDown, listbox);
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("* Red")(component$1))));
        Curry._1(TestUtils.FireEvent.pressDown, listbox);
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("* Green")(component$1))));
        Curry._1(TestUtils.FireEvent.pressDown, listbox);
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("* Blue")(component$1))));
        Curry._1(TestUtils.FireEvent.pressDown, listbox);
        return TestUtils.toBeInTheDocument(expect(getOption("* Red")(component$1)));
      }));

Jest.test("highlights previous option when pressing UP ", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        var listbox = TestUtils.getListbox(undefined, component$1);
        Curry._1(TestUtils.FireEvent.pressUp, listbox);
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("* Blue")(component$1))));
        Curry._1(TestUtils.FireEvent.pressUp, listbox);
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("* Green")(component$1))));
        Curry._1(TestUtils.FireEvent.pressUp, listbox);
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("* Red")(component$1))));
        Curry._1(TestUtils.FireEvent.pressUp, listbox);
        return TestUtils.toBeInTheDocument(expect(getOption("* Blue")(component$1)));
      }));

Jest.test("selects and deselects option when pressing SPACE/ENTER", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(false, undefined));
        var arg = TestUtils.FireEvent.click;
        Curry._2(arg, undefined, getOption("Red")(component$1));
        TestUtils.assertAndContinue(TestUtils.toHaveAttribute("aria-selected", "true")(expect(getOption("* Red")(component$1))));
        Curry._1(TestUtils.FireEvent.pressEnter, TestUtils.getListbox(undefined, component$1));
        TestUtils.assertAndContinue(TestUtils.toHaveAttribute("aria-selected", "false")(expect(getOption("* Red")(component$1))));
        Curry._1(TestUtils.FireEvent.pressSpace, TestUtils.getListbox(undefined, component$1));
        return TestUtils.toHaveAttribute("aria-selected", "true")(expect(getOption("* Red")(component$1)));
      }));

Jest.test("highlights first when focused and no option selected", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        var listbox = TestUtils.getListbox(undefined, component$1);
        var arg = TestUtils.FireEvent.focus;
        Curry._2(arg, undefined, listbox);
        return TestUtils.toBeInTheDocument(expect(getOption("* Red")(component$1)));
      }));

Jest.test("highlights selected index when focus and option selected", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        var arg = TestUtils.FireEvent.click;
        Curry._2(arg, undefined, getOption("Green")(component$1));
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("* Green")(component$1))));
        Curry._1(TestUtils.FireEvent.pressDown, TestUtils.getListbox(undefined, component$1));
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("* Blue")(component$1))));
        var arg$1 = TestUtils.FireEvent.focus;
        Curry._2(arg$1, undefined, TestUtils.getListbox(undefined, component$1));
        return TestUtils.toBeInTheDocument(expect(getOption("* Green")(component$1)));
      }));

Jest.test("resets highlighted option when focus out", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        var listbox = TestUtils.getListbox(undefined, component$1);
        Curry._1(TestUtils.FireEvent.pressDown, listbox);
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("* Red")(component$1))));
        var arg = TestUtils.FireEvent.blur;
        Curry._2(arg, undefined, listbox);
        return TestUtils.toBeInTheDocument(expect(getOption("Red")(component$1)));
      }));

Jest.test("focus out when pressing Tab", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(undefined, undefined));
        UserEvent.tab(undefined, undefined, undefined);
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("* Red")(component$1))));
        UserEvent.tab(undefined, undefined, undefined);
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("Red")(component$1))));
        TestUtils.assertAndContinue(TestUtils.toBeInTheDocument(expect(getOption("Green")(component$1))));
        return TestUtils.toBeInTheDocument(expect(getOption("Blue")(component$1)));
      }));

Jest.test("selects multiple when multiSelect is true", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(true, undefined));
        UserEvent.tab(undefined, undefined, undefined);
        Curry._1(TestUtils.FireEvent.pressEnter, TestUtils.getListbox(undefined, component$1));
        TestUtils.assertAndContinue(TestUtils.toHaveAttribute("aria-selected", "true")(expect(getOption("* Red")(component$1))));
        Curry._1(TestUtils.FireEvent.pressDown, TestUtils.getListbox(undefined, component$1));
        Curry._1(TestUtils.FireEvent.pressEnter, TestUtils.getListbox(undefined, component$1));
        Curry._1(TestUtils.FireEvent.pressDown, TestUtils.getListbox(undefined, component$1));
        Curry._1(TestUtils.FireEvent.pressEnter, TestUtils.getListbox(undefined, component$1));
        return TestUtils.toHaveAttribute("aria-selected", "true")(expect(getOption("Red")(component$1)));
      }));

Jest.test("selects next when pressing arrow down and shift", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(true, undefined));
        UserEvent.tab(undefined, undefined, undefined);
        Curry._1(TestUtils.FireEvent.pressDownShift, TestUtils.getListbox(undefined, component$1));
        return TestUtils.toHaveAttribute("aria-selected", "true")(expect(getOption("* Green")(component$1)));
      }));

Jest.test("selects previous when pressing arrow up and shift", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component(true, undefined));
        UserEvent.tab(undefined, undefined, undefined);
        Curry._1(TestUtils.FireEvent.pressUpShift, TestUtils.getListbox(undefined, component$1));
        return TestUtils.toHaveAttribute("aria-selected", "true")(expect(getOption("* Blue")(component$1)));
      }));

var FireEvent = TestUtils.FireEvent;

var assertAndContinue = TestUtils.assertAndContinue;

var getListbox = TestUtils.getListbox;

var getButton = TestUtils.getButton;

var HaveClass = TestUtils.HaveClass;

var TextContent = TestUtils.TextContent;

var toBeDisabled = TestUtils.toBeDisabled;

var toBeEnabled = TestUtils.toBeEnabled;

var toBeEmpty = TestUtils.toBeEmpty;

var toBeEmptyDOMElement = TestUtils.toBeEmptyDOMElement;

var toBeInTheDocument = TestUtils.toBeInTheDocument;

var toBeInvalid = TestUtils.toBeInvalid;

var toBeRequired = TestUtils.toBeRequired;

var toBeValid = TestUtils.toBeValid;

var toBeVisible = TestUtils.toBeVisible;

var toContainElement = TestUtils.toContainElement;

var toContainHTML = TestUtils.toContainHTML;

var toHaveAttribute = TestUtils.toHaveAttribute;

var toHaveClass = TestUtils.toHaveClass;

var toHaveFocus = TestUtils.toHaveFocus;

var toHaveFormValues = TestUtils.toHaveFormValues;

var toHaveStyle = TestUtils.toHaveStyle;

var toHaveTextContent = TestUtils.toHaveTextContent;

var toHaveValue = TestUtils.toHaveValue;

var toHaveDisplayValue = TestUtils.toHaveDisplayValue;

var toBeChecked = TestUtils.toBeChecked;

var toBePartiallyChecked = TestUtils.toBePartiallyChecked;

var toHaveDescription = TestUtils.toHaveDescription;

exports.FireEvent = FireEvent;
exports.assertAndContinue = assertAndContinue;
exports.getListbox = getListbox;
exports.getButton = getButton;
exports.HaveClass = HaveClass;
exports.TextContent = TextContent;
exports.toBeDisabled = toBeDisabled;
exports.toBeEnabled = toBeEnabled;
exports.toBeEmpty = toBeEmpty;
exports.toBeEmptyDOMElement = toBeEmptyDOMElement;
exports.toBeInTheDocument = toBeInTheDocument;
exports.toBeInvalid = toBeInvalid;
exports.toBeRequired = toBeRequired;
exports.toBeValid = toBeValid;
exports.toBeVisible = toBeVisible;
exports.toContainElement = toContainElement;
exports.toContainHTML = toContainHTML;
exports.toHaveAttribute = toHaveAttribute;
exports.toHaveClass = toHaveClass;
exports.toHaveFocus = toHaveFocus;
exports.toHaveFormValues = toHaveFormValues;
exports.toHaveStyle = toHaveStyle;
exports.toHaveTextContent = toHaveTextContent;
exports.toHaveValue = toHaveValue;
exports.toHaveDisplayValue = toHaveDisplayValue;
exports.toBeChecked = toBeChecked;
exports.toBePartiallyChecked = toBePartiallyChecked;
exports.toHaveDescription = toHaveDescription;
exports.ListboxComponent = ListboxComponent;
exports.component = component;
exports.getOption = getOption;
/*  Not a pure module */
