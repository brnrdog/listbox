(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{61:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return a})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var i=t(2),o=t(6),r=(t(0),t(76)),s={id:"getting_started",title:"Getting started",sidebar_label:"Getting started",slug:"/"},a={unversionedId:"getting_started",id:"getting_started",isDocsHomePage:!1,title:"Getting started",description:"Introduction",source:"@site/docs/getting_started.md",slug:"/",permalink:"/listbox/docs/",editUrl:"https://github.com/brnrdog/listbox/edit/master/docs/docs/getting_started.md",version:"current",sidebar_label:"Getting started",sidebar:"docs",next:{title:"Examples",permalink:"/listbox/docs/examples"}},l=[{value:"Introduction",id:"introduction",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Using in JavaScript/TypeScript projects:",id:"using-in-javascripttypescript-projects",children:[]},{value:"Using in ReScript projects:",id:"using-in-rescript-projects",children:[]}]}],c={rightToc:l};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"This library provides hooks written in ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://rescript-lang.org/"}),"ReScript")," for building ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://www.w3.org/TR/wai-aria-practices-1.1/#Listbox"}),"listbox")," pattern components in React applications."),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,"Install it using the package manager of your preference:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),"npm install --save @brnrdog/listbox\n")),Object(r.b)("p",null,"Or if your project uses yarn:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @brnrdog/listbox\n")),Object(r.b)("p",null,"For ",Object(r.b)("strong",{parentName:"p"},"ReScript")," projects, add ",Object(r.b)("inlineCode",{parentName:"p"},"@brnrdog/listbox")," as a dependency in your ",Object(r.b)("inlineCode",{parentName:"p"},"bsconfig.json")," file:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-json"}),'{\n  // ...\n  "bs-dependencies": [\n    "@brnrdog/listbox"\n    // ...\n  ]\n}\n')),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("p",null,"The main React hook for building listbox components is the ",Object(r.b)("inlineCode",{parentName:"p"},"useListbox"),". Given a list of options, this hook will provide the state and the necessary event handlers for building your listbox."),Object(r.b)("h3",{id:"using-in-javascripttypescript-projects"},"Using in JavaScript/TypeScript projects:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'const options = ["Red", "Green", "Blue"];\n\nfunction ColorSelect() {\n  const {\n    highlightedIndex,\n    getOptionProps,\n    getContainerProps,\n    selectedIndexes\n  } = useListbox(options);\n\n  const selectedColors = selectedIndexes.map(i => options[i]).join(",")\n\n  return (\n    <div>\n      Selected color:{" "}\n      {selectedColors.length === 0 ? "no selected color" : selectedColors}.\n      <ul {...getContainerProps()}>\n        {options.map((option, index) => {\n          const highlighted = highlightedIndex === index;\n\n          return (\n            <li {...getOptionProps(index)}>\n              {highlighted ? `> ${option}` : option}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n')),Object(r.b)("h3",{id:"using-in-rescript-projects"},"Using in ReScript projects:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-rescript"}),'module ColorSelect {\n  let options = ["Red", "Green", "Blue"]\n\n  @react.component\n  let make = () => {\n    let {\n      highlightedIndex,\n      getOptionProps,\n      getContainerProps,\n      selectedIndexes\n    }: Listbox.listbox = Listbox.useListbox(options)\n\n    let { role, tabIndex, onKeyDown, onFocus, onBlur } = getContainerProps()\n\n    let selectedOption = selectedIndexes\n    -> Belt.Array.map(i => options -> Belt.Array.get(i))\n    -> Belt.Array.get(0)\n    -> Belt.getWithDefault("no selected color.")\n\n    let renderColorOption = (index, option) => {\n      let {\n        ariaSelected,\n        onClick,\n        role,\n      }: Listbox.optionProps = getOptionProps(index)\n      let highlighted =  highlightedIndex == index\n\n      <li key=option onClick onKeyDown role ariaSelected>\n        {(highlighted ? `> ${option}` : option) |> React.string}\n      </li>\n    }\n\n    <div>\n      {React.string("Selected color :" ++ selectedOption)}\n      <ul role tabIndex onKeyDown onFocus onBlur>\n        {options\n          -> Belt.Array.mapWithIndex(renderOption)\n          -> React.array}\n      </ul>\n    </div>\n  }\n}\n')))}p.isMDXComponent=!0}}]);